AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for sam-sched-sqs-lambda

Globals:
  Function:
    Runtime: python3.11
    Timeout: 3
    MemorySize: 128

Parameters:
  AppId:
    Type: String
  AppEnv:
    Type: String
    AllowedValues:
      - dev
      - stg
      - prd

Outputs:
  HelloWorldFunctionArn:
    Description: "Sample lambda function arn"
    Value: !GetAtt HelloWorldFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-lambda-hello-arn"
  HelloWorldFunctionName:
    Description: "Sample lambda function name"
    Value: !Ref HelloWorldFunction
    Export:
      Name: !Sub "${AWS::StackName}-lambda-hello-name"
  FunctionRoleArn:
    Description: "Lambda function role arn"
    Value: !GetAtt FunctionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-role-arn"
  LibLayerArn:
    Description: "sam-sched-sqs-lambda liblayer arn"
    Value: !Ref LibLayer
    Export:
      Name: !Sub "${AWS::StackName}-liblayer-arn"
  InvokeHelloWorldFifoQueueArn:
    Description: "sam-sched-sqs-lambda fifo queue arn"
    Value: !GetAtt InvokeHelloWorldFifoQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-queue-arn"
  InvokeHelloWorldFifoQueueName:
    Description: "sam-sched-sqs-lambda fifo queue name"
    Value: !GetAtt InvokeHelloWorldFifoQueue.QueueName
    Export:
      Name: !Sub "${AWS::StackName}-queue-name"
  InvokeHelloWorldFifoQueueUrl:
    Description: "sam-sched-sqs-lambda fifo queue url"
    Value: !GetAtt InvokeHelloWorldFifoQueue.QueueUrl
    Export:
      Name: !Sub "${AWS::StackName}-queue-url"
  HelloWorldEventSourceMappingId:
    Description: "sam-sched-sqs-lambda event source mapping id"
    Value: !Ref HelloWorldEventSourceMapping
    Export:
      Name: !Sub "${AWS::StackName}-lambda-event-source-mapping-id"
  HelloWorldEventSourceMappingArn:
    Description: "sam-sched-sqs-lambda event source mapping arn"
    Value: !GetAtt HelloWorldEventSourceMapping.EventSourceMappingArn
    Export:
      Name: !Sub "${AWS::StackName}-lambda-event-source-mapping-arn"

Resources:
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "service-role-${AppId}-${AppEnv}-lambda"
      Description: "A service role for a lambda function"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      #      Policies:
      #        - PolicyName: !Sub "lambda-policy-${AppId}-${AppEnv}"
      #          PolicyDocument:
      #            Version: "2012-10-17"
      #            Statement:
      #              - Effect: Allow
      #                Action:
      #                  - 'logs:CreateLogGroup'
      #                  - 'logs:CreateLogStream'
      #                  - 'logs:PutLogEvents'
      #                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: AppId
          Value: !Ref AppId
        - Key: AppEnv
          Value: !Ref AppEnv
  LibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: !Sub "Libraries for ${AppId}-${AppEnv}"
      LayerName: !Sub "${AppId}-${AppEnv}-liblayer"
      ContentUri: liblayer
      CompatibleRuntimes:
        - python3.11
    Metadata:
      BuildMethod: python3.11
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppId}-${AppEnv}-hello-world"
      CodeUri: src/lambda_handlers/hello_world/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Role: !GetAtt FunctionRole.Arn
      Timeout: 10
      Layers:
        - !Ref LibLayer
      Environment:
        Variables:
          APP_ID: !Ref AppId
          APP_ENV: !Ref AppEnv
      Tags:
        Application: !Ref "AWS::StackId"
        AppId: !Ref AppId
        AppEnv: !Ref AppEnv
  InvokeHelloWorldFifoQueue:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      DelaySeconds: 0
      FifoQueue: true
      MessageRetentionPeriod: 60
      QueueName: !Sub "${AppId}-${AppEnv}-invoke-hello-world.fifo"
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 10
      # To define the number of retries, you must configure the maxReceiveCount value on the source queueâ€™s RedrivePolicy.
      # For more information, see SetQueueAttributes in the Amazon SQS API Reference.
      # Also, see Introducing Amazon Simple Queue Service dead-letter queue redrive to source queues  on the AWS Blog.
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: AppId
          Value: !Ref AppId
        - Key: AppEnv
          Value: !Ref AppEnv
  HelloWorldResourceBasedPermission:
    # TODO: Is this resource unnecessary? Check it out.
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HelloWorldFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt InvokeHelloWorldFifoQueue.Arn
  HelloWorldEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt InvokeHelloWorldFifoQueue.Arn
      FunctionName: !Ref HelloWorldFunction
      FunctionResponseTypes:
        - ReportBatchItemFailures
      ScalingConfig:
        # MaximumConcurrency must be less than or equal to the function's reserved concurrency.
        # See https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-scaling.html
        MaximumConcurrency: 100
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: AppId
          Value: !Ref AppId
        - Key: AppEnv
          Value: !Ref AppEnv
  #      FilterCriteria:
  #        # Event filtering: https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-event-filtering-amazon-sqs-dynamodb-kinesis-sources/
  #        # The filters are combined using OR logic by default.
  #        # In other words, an event/payload meeting any of the filtering criteria defined will be passed on to trigger a Lambda function while an event/payload not matching any of the filtering criteria will be dropped.
  #        #
  #        # Event filtering rule syntax: https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax
  #        # Especially SQS: https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-sqs
  #        Filters:
  #          - Pattern: '{"foo": "bar", "desc":"Pattern must be a JSON string."}'
  #

  # It may be required, AWS::SQS::QueuePolicy
  #  MySqsQueuePolicy:
  #    Type: AWS::SQS::QueuePolicy
  #    Properties:
  #      PolicyDocument:
  #        Id: "TODO: Id?"
  #        Statement:
  #          - Sid: !Sub "TODO: sid here."
  #            Effect: Allow
  #            Principal: "TODO: principal here."
  #            Action: "SQS:* TODO: limit actions."
  #            Resource: !GetAtt InvokeHelloWorldFifoQueue.Arn
  #      Queues:
  #        - !Ref InvokeHelloWorldFifoQueue

  # TODO: Add Schedule sending a message to InvokeHelloWorldFifoQueue in every minute
